
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Harvest` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Harvest
 * 
 */
export type HarvestModel = runtime.Types.Result.DefaultSelection<Prisma.$HarvestPayload>

export type AggregateHarvest = {
  _count: HarvestCountAggregateOutputType | null
  _min: HarvestMinAggregateOutputType | null
  _max: HarvestMaxAggregateOutputType | null
}

export type HarvestMinAggregateOutputType = {
  id: string | null
  year: string | null
  farmId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type HarvestMaxAggregateOutputType = {
  id: string | null
  year: string | null
  farmId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type HarvestCountAggregateOutputType = {
  id: number
  year: number
  farmId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type HarvestMinAggregateInputType = {
  id?: true
  year?: true
  farmId?: true
  createdAt?: true
  updatedAt?: true
}

export type HarvestMaxAggregateInputType = {
  id?: true
  year?: true
  farmId?: true
  createdAt?: true
  updatedAt?: true
}

export type HarvestCountAggregateInputType = {
  id?: true
  year?: true
  farmId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type HarvestAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Harvest to aggregate.
   */
  where?: Prisma.HarvestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Harvests to fetch.
   */
  orderBy?: Prisma.HarvestOrderByWithRelationInput | Prisma.HarvestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.HarvestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Harvests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Harvests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Harvests
  **/
  _count?: true | HarvestCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: HarvestMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: HarvestMaxAggregateInputType
}

export type GetHarvestAggregateType<T extends HarvestAggregateArgs> = {
      [P in keyof T & keyof AggregateHarvest]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateHarvest[P]>
    : Prisma.GetScalarType<T[P], AggregateHarvest[P]>
}




export type HarvestGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.HarvestWhereInput
  orderBy?: Prisma.HarvestOrderByWithAggregationInput | Prisma.HarvestOrderByWithAggregationInput[]
  by: Prisma.HarvestScalarFieldEnum[] | Prisma.HarvestScalarFieldEnum
  having?: Prisma.HarvestScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: HarvestCountAggregateInputType | true
  _min?: HarvestMinAggregateInputType
  _max?: HarvestMaxAggregateInputType
}

export type HarvestGroupByOutputType = {
  id: string
  year: string
  farmId: string
  createdAt: Date
  updatedAt: Date
  _count: HarvestCountAggregateOutputType | null
  _min: HarvestMinAggregateOutputType | null
  _max: HarvestMaxAggregateOutputType | null
}

type GetHarvestGroupByPayload<T extends HarvestGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<HarvestGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof HarvestGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], HarvestGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], HarvestGroupByOutputType[P]>
      }
    >
  > 



export type HarvestWhereInput = {
  AND?: Prisma.HarvestWhereInput | Prisma.HarvestWhereInput[]
  OR?: Prisma.HarvestWhereInput[]
  NOT?: Prisma.HarvestWhereInput | Prisma.HarvestWhereInput[]
  id?: Prisma.StringFilter<"Harvest"> | string
  year?: Prisma.StringFilter<"Harvest"> | string
  farmId?: Prisma.StringFilter<"Harvest"> | string
  createdAt?: Prisma.DateTimeFilter<"Harvest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Harvest"> | Date | string
  farm?: Prisma.XOR<Prisma.FarmScalarRelationFilter, Prisma.FarmWhereInput>
  crops?: Prisma.CropListRelationFilter
}

export type HarvestOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  farmId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  farm?: Prisma.FarmOrderByWithRelationInput
  crops?: Prisma.CropOrderByRelationAggregateInput
}

export type HarvestWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.HarvestWhereInput | Prisma.HarvestWhereInput[]
  OR?: Prisma.HarvestWhereInput[]
  NOT?: Prisma.HarvestWhereInput | Prisma.HarvestWhereInput[]
  year?: Prisma.StringFilter<"Harvest"> | string
  farmId?: Prisma.StringFilter<"Harvest"> | string
  createdAt?: Prisma.DateTimeFilter<"Harvest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Harvest"> | Date | string
  farm?: Prisma.XOR<Prisma.FarmScalarRelationFilter, Prisma.FarmWhereInput>
  crops?: Prisma.CropListRelationFilter
}, "id">

export type HarvestOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  farmId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.HarvestCountOrderByAggregateInput
  _max?: Prisma.HarvestMaxOrderByAggregateInput
  _min?: Prisma.HarvestMinOrderByAggregateInput
}

export type HarvestScalarWhereWithAggregatesInput = {
  AND?: Prisma.HarvestScalarWhereWithAggregatesInput | Prisma.HarvestScalarWhereWithAggregatesInput[]
  OR?: Prisma.HarvestScalarWhereWithAggregatesInput[]
  NOT?: Prisma.HarvestScalarWhereWithAggregatesInput | Prisma.HarvestScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Harvest"> | string
  year?: Prisma.StringWithAggregatesFilter<"Harvest"> | string
  farmId?: Prisma.StringWithAggregatesFilter<"Harvest"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Harvest"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Harvest"> | Date | string
}

export type HarvestCreateInput = {
  id?: string
  year: string
  createdAt?: Date | string
  updatedAt?: Date | string
  farm: Prisma.FarmCreateNestedOneWithoutHarvestsInput
  crops?: Prisma.CropCreateNestedManyWithoutHarvestInput
}

export type HarvestUncheckedCreateInput = {
  id?: string
  year: string
  farmId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  crops?: Prisma.CropUncheckedCreateNestedManyWithoutHarvestInput
}

export type HarvestUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  farm?: Prisma.FarmUpdateOneRequiredWithoutHarvestsNestedInput
  crops?: Prisma.CropUpdateManyWithoutHarvestNestedInput
}

export type HarvestUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.StringFieldUpdateOperationsInput | string
  farmId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  crops?: Prisma.CropUncheckedUpdateManyWithoutHarvestNestedInput
}

export type HarvestCreateManyInput = {
  id?: string
  year: string
  farmId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HarvestUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HarvestUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.StringFieldUpdateOperationsInput | string
  farmId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HarvestListRelationFilter = {
  every?: Prisma.HarvestWhereInput
  some?: Prisma.HarvestWhereInput
  none?: Prisma.HarvestWhereInput
}

export type HarvestOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type HarvestCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  farmId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HarvestMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  farmId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HarvestMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  year?: Prisma.SortOrder
  farmId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type HarvestScalarRelationFilter = {
  is?: Prisma.HarvestWhereInput
  isNot?: Prisma.HarvestWhereInput
}

export type HarvestCreateNestedManyWithoutFarmInput = {
  create?: Prisma.XOR<Prisma.HarvestCreateWithoutFarmInput, Prisma.HarvestUncheckedCreateWithoutFarmInput> | Prisma.HarvestCreateWithoutFarmInput[] | Prisma.HarvestUncheckedCreateWithoutFarmInput[]
  connectOrCreate?: Prisma.HarvestCreateOrConnectWithoutFarmInput | Prisma.HarvestCreateOrConnectWithoutFarmInput[]
  createMany?: Prisma.HarvestCreateManyFarmInputEnvelope
  connect?: Prisma.HarvestWhereUniqueInput | Prisma.HarvestWhereUniqueInput[]
}

export type HarvestUncheckedCreateNestedManyWithoutFarmInput = {
  create?: Prisma.XOR<Prisma.HarvestCreateWithoutFarmInput, Prisma.HarvestUncheckedCreateWithoutFarmInput> | Prisma.HarvestCreateWithoutFarmInput[] | Prisma.HarvestUncheckedCreateWithoutFarmInput[]
  connectOrCreate?: Prisma.HarvestCreateOrConnectWithoutFarmInput | Prisma.HarvestCreateOrConnectWithoutFarmInput[]
  createMany?: Prisma.HarvestCreateManyFarmInputEnvelope
  connect?: Prisma.HarvestWhereUniqueInput | Prisma.HarvestWhereUniqueInput[]
}

export type HarvestUpdateManyWithoutFarmNestedInput = {
  create?: Prisma.XOR<Prisma.HarvestCreateWithoutFarmInput, Prisma.HarvestUncheckedCreateWithoutFarmInput> | Prisma.HarvestCreateWithoutFarmInput[] | Prisma.HarvestUncheckedCreateWithoutFarmInput[]
  connectOrCreate?: Prisma.HarvestCreateOrConnectWithoutFarmInput | Prisma.HarvestCreateOrConnectWithoutFarmInput[]
  upsert?: Prisma.HarvestUpsertWithWhereUniqueWithoutFarmInput | Prisma.HarvestUpsertWithWhereUniqueWithoutFarmInput[]
  createMany?: Prisma.HarvestCreateManyFarmInputEnvelope
  set?: Prisma.HarvestWhereUniqueInput | Prisma.HarvestWhereUniqueInput[]
  disconnect?: Prisma.HarvestWhereUniqueInput | Prisma.HarvestWhereUniqueInput[]
  delete?: Prisma.HarvestWhereUniqueInput | Prisma.HarvestWhereUniqueInput[]
  connect?: Prisma.HarvestWhereUniqueInput | Prisma.HarvestWhereUniqueInput[]
  update?: Prisma.HarvestUpdateWithWhereUniqueWithoutFarmInput | Prisma.HarvestUpdateWithWhereUniqueWithoutFarmInput[]
  updateMany?: Prisma.HarvestUpdateManyWithWhereWithoutFarmInput | Prisma.HarvestUpdateManyWithWhereWithoutFarmInput[]
  deleteMany?: Prisma.HarvestScalarWhereInput | Prisma.HarvestScalarWhereInput[]
}

export type HarvestUncheckedUpdateManyWithoutFarmNestedInput = {
  create?: Prisma.XOR<Prisma.HarvestCreateWithoutFarmInput, Prisma.HarvestUncheckedCreateWithoutFarmInput> | Prisma.HarvestCreateWithoutFarmInput[] | Prisma.HarvestUncheckedCreateWithoutFarmInput[]
  connectOrCreate?: Prisma.HarvestCreateOrConnectWithoutFarmInput | Prisma.HarvestCreateOrConnectWithoutFarmInput[]
  upsert?: Prisma.HarvestUpsertWithWhereUniqueWithoutFarmInput | Prisma.HarvestUpsertWithWhereUniqueWithoutFarmInput[]
  createMany?: Prisma.HarvestCreateManyFarmInputEnvelope
  set?: Prisma.HarvestWhereUniqueInput | Prisma.HarvestWhereUniqueInput[]
  disconnect?: Prisma.HarvestWhereUniqueInput | Prisma.HarvestWhereUniqueInput[]
  delete?: Prisma.HarvestWhereUniqueInput | Prisma.HarvestWhereUniqueInput[]
  connect?: Prisma.HarvestWhereUniqueInput | Prisma.HarvestWhereUniqueInput[]
  update?: Prisma.HarvestUpdateWithWhereUniqueWithoutFarmInput | Prisma.HarvestUpdateWithWhereUniqueWithoutFarmInput[]
  updateMany?: Prisma.HarvestUpdateManyWithWhereWithoutFarmInput | Prisma.HarvestUpdateManyWithWhereWithoutFarmInput[]
  deleteMany?: Prisma.HarvestScalarWhereInput | Prisma.HarvestScalarWhereInput[]
}

export type HarvestCreateNestedOneWithoutCropsInput = {
  create?: Prisma.XOR<Prisma.HarvestCreateWithoutCropsInput, Prisma.HarvestUncheckedCreateWithoutCropsInput>
  connectOrCreate?: Prisma.HarvestCreateOrConnectWithoutCropsInput
  connect?: Prisma.HarvestWhereUniqueInput
}

export type HarvestUpdateOneRequiredWithoutCropsNestedInput = {
  create?: Prisma.XOR<Prisma.HarvestCreateWithoutCropsInput, Prisma.HarvestUncheckedCreateWithoutCropsInput>
  connectOrCreate?: Prisma.HarvestCreateOrConnectWithoutCropsInput
  upsert?: Prisma.HarvestUpsertWithoutCropsInput
  connect?: Prisma.HarvestWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.HarvestUpdateToOneWithWhereWithoutCropsInput, Prisma.HarvestUpdateWithoutCropsInput>, Prisma.HarvestUncheckedUpdateWithoutCropsInput>
}

export type HarvestCreateWithoutFarmInput = {
  id?: string
  year: string
  createdAt?: Date | string
  updatedAt?: Date | string
  crops?: Prisma.CropCreateNestedManyWithoutHarvestInput
}

export type HarvestUncheckedCreateWithoutFarmInput = {
  id?: string
  year: string
  createdAt?: Date | string
  updatedAt?: Date | string
  crops?: Prisma.CropUncheckedCreateNestedManyWithoutHarvestInput
}

export type HarvestCreateOrConnectWithoutFarmInput = {
  where: Prisma.HarvestWhereUniqueInput
  create: Prisma.XOR<Prisma.HarvestCreateWithoutFarmInput, Prisma.HarvestUncheckedCreateWithoutFarmInput>
}

export type HarvestCreateManyFarmInputEnvelope = {
  data: Prisma.HarvestCreateManyFarmInput | Prisma.HarvestCreateManyFarmInput[]
  skipDuplicates?: boolean
}

export type HarvestUpsertWithWhereUniqueWithoutFarmInput = {
  where: Prisma.HarvestWhereUniqueInput
  update: Prisma.XOR<Prisma.HarvestUpdateWithoutFarmInput, Prisma.HarvestUncheckedUpdateWithoutFarmInput>
  create: Prisma.XOR<Prisma.HarvestCreateWithoutFarmInput, Prisma.HarvestUncheckedCreateWithoutFarmInput>
}

export type HarvestUpdateWithWhereUniqueWithoutFarmInput = {
  where: Prisma.HarvestWhereUniqueInput
  data: Prisma.XOR<Prisma.HarvestUpdateWithoutFarmInput, Prisma.HarvestUncheckedUpdateWithoutFarmInput>
}

export type HarvestUpdateManyWithWhereWithoutFarmInput = {
  where: Prisma.HarvestScalarWhereInput
  data: Prisma.XOR<Prisma.HarvestUpdateManyMutationInput, Prisma.HarvestUncheckedUpdateManyWithoutFarmInput>
}

export type HarvestScalarWhereInput = {
  AND?: Prisma.HarvestScalarWhereInput | Prisma.HarvestScalarWhereInput[]
  OR?: Prisma.HarvestScalarWhereInput[]
  NOT?: Prisma.HarvestScalarWhereInput | Prisma.HarvestScalarWhereInput[]
  id?: Prisma.StringFilter<"Harvest"> | string
  year?: Prisma.StringFilter<"Harvest"> | string
  farmId?: Prisma.StringFilter<"Harvest"> | string
  createdAt?: Prisma.DateTimeFilter<"Harvest"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Harvest"> | Date | string
}

export type HarvestCreateWithoutCropsInput = {
  id?: string
  year: string
  createdAt?: Date | string
  updatedAt?: Date | string
  farm: Prisma.FarmCreateNestedOneWithoutHarvestsInput
}

export type HarvestUncheckedCreateWithoutCropsInput = {
  id?: string
  year: string
  farmId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HarvestCreateOrConnectWithoutCropsInput = {
  where: Prisma.HarvestWhereUniqueInput
  create: Prisma.XOR<Prisma.HarvestCreateWithoutCropsInput, Prisma.HarvestUncheckedCreateWithoutCropsInput>
}

export type HarvestUpsertWithoutCropsInput = {
  update: Prisma.XOR<Prisma.HarvestUpdateWithoutCropsInput, Prisma.HarvestUncheckedUpdateWithoutCropsInput>
  create: Prisma.XOR<Prisma.HarvestCreateWithoutCropsInput, Prisma.HarvestUncheckedCreateWithoutCropsInput>
  where?: Prisma.HarvestWhereInput
}

export type HarvestUpdateToOneWithWhereWithoutCropsInput = {
  where?: Prisma.HarvestWhereInput
  data: Prisma.XOR<Prisma.HarvestUpdateWithoutCropsInput, Prisma.HarvestUncheckedUpdateWithoutCropsInput>
}

export type HarvestUpdateWithoutCropsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  farm?: Prisma.FarmUpdateOneRequiredWithoutHarvestsNestedInput
}

export type HarvestUncheckedUpdateWithoutCropsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.StringFieldUpdateOperationsInput | string
  farmId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type HarvestCreateManyFarmInput = {
  id?: string
  year: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type HarvestUpdateWithoutFarmInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  crops?: Prisma.CropUpdateManyWithoutHarvestNestedInput
}

export type HarvestUncheckedUpdateWithoutFarmInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  crops?: Prisma.CropUncheckedUpdateManyWithoutHarvestNestedInput
}

export type HarvestUncheckedUpdateManyWithoutFarmInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  year?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type HarvestCountOutputType
 */

export type HarvestCountOutputType = {
  crops: number
}

export type HarvestCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  crops?: boolean | HarvestCountOutputTypeCountCropsArgs
}

/**
 * HarvestCountOutputType without action
 */
export type HarvestCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the HarvestCountOutputType
   */
  select?: Prisma.HarvestCountOutputTypeSelect<ExtArgs> | null
}

/**
 * HarvestCountOutputType without action
 */
export type HarvestCountOutputTypeCountCropsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CropWhereInput
}


export type HarvestSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year?: boolean
  farmId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  farm?: boolean | Prisma.FarmDefaultArgs<ExtArgs>
  crops?: boolean | Prisma.Harvest$cropsArgs<ExtArgs>
  _count?: boolean | Prisma.HarvestCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["harvest"]>

export type HarvestSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year?: boolean
  farmId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  farm?: boolean | Prisma.FarmDefaultArgs<ExtArgs>
}, ExtArgs["result"]["harvest"]>

export type HarvestSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  year?: boolean
  farmId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  farm?: boolean | Prisma.FarmDefaultArgs<ExtArgs>
}, ExtArgs["result"]["harvest"]>

export type HarvestSelectScalar = {
  id?: boolean
  year?: boolean
  farmId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type HarvestOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "year" | "farmId" | "createdAt" | "updatedAt", ExtArgs["result"]["harvest"]>
export type HarvestInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  farm?: boolean | Prisma.FarmDefaultArgs<ExtArgs>
  crops?: boolean | Prisma.Harvest$cropsArgs<ExtArgs>
  _count?: boolean | Prisma.HarvestCountOutputTypeDefaultArgs<ExtArgs>
}
export type HarvestIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  farm?: boolean | Prisma.FarmDefaultArgs<ExtArgs>
}
export type HarvestIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  farm?: boolean | Prisma.FarmDefaultArgs<ExtArgs>
}

export type $HarvestPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Harvest"
  objects: {
    farm: Prisma.$FarmPayload<ExtArgs>
    crops: Prisma.$CropPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    year: string
    farmId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["harvest"]>
  composites: {}
}

export type HarvestGetPayload<S extends boolean | null | undefined | HarvestDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$HarvestPayload, S>

export type HarvestCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<HarvestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: HarvestCountAggregateInputType | true
  }

export interface HarvestDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Harvest'], meta: { name: 'Harvest' } }
  /**
   * Find zero or one Harvest that matches the filter.
   * @param {HarvestFindUniqueArgs} args - Arguments to find a Harvest
   * @example
   * // Get one Harvest
   * const harvest = await prisma.harvest.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends HarvestFindUniqueArgs>(args: Prisma.SelectSubset<T, HarvestFindUniqueArgs<ExtArgs>>): Prisma.Prisma__HarvestClient<runtime.Types.Result.GetResult<Prisma.$HarvestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Harvest that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {HarvestFindUniqueOrThrowArgs} args - Arguments to find a Harvest
   * @example
   * // Get one Harvest
   * const harvest = await prisma.harvest.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends HarvestFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, HarvestFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__HarvestClient<runtime.Types.Result.GetResult<Prisma.$HarvestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Harvest that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HarvestFindFirstArgs} args - Arguments to find a Harvest
   * @example
   * // Get one Harvest
   * const harvest = await prisma.harvest.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends HarvestFindFirstArgs>(args?: Prisma.SelectSubset<T, HarvestFindFirstArgs<ExtArgs>>): Prisma.Prisma__HarvestClient<runtime.Types.Result.GetResult<Prisma.$HarvestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Harvest that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HarvestFindFirstOrThrowArgs} args - Arguments to find a Harvest
   * @example
   * // Get one Harvest
   * const harvest = await prisma.harvest.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends HarvestFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, HarvestFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__HarvestClient<runtime.Types.Result.GetResult<Prisma.$HarvestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Harvests that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HarvestFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Harvests
   * const harvests = await prisma.harvest.findMany()
   * 
   * // Get first 10 Harvests
   * const harvests = await prisma.harvest.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const harvestWithIdOnly = await prisma.harvest.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends HarvestFindManyArgs>(args?: Prisma.SelectSubset<T, HarvestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HarvestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Harvest.
   * @param {HarvestCreateArgs} args - Arguments to create a Harvest.
   * @example
   * // Create one Harvest
   * const Harvest = await prisma.harvest.create({
   *   data: {
   *     // ... data to create a Harvest
   *   }
   * })
   * 
   */
  create<T extends HarvestCreateArgs>(args: Prisma.SelectSubset<T, HarvestCreateArgs<ExtArgs>>): Prisma.Prisma__HarvestClient<runtime.Types.Result.GetResult<Prisma.$HarvestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Harvests.
   * @param {HarvestCreateManyArgs} args - Arguments to create many Harvests.
   * @example
   * // Create many Harvests
   * const harvest = await prisma.harvest.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends HarvestCreateManyArgs>(args?: Prisma.SelectSubset<T, HarvestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Harvests and returns the data saved in the database.
   * @param {HarvestCreateManyAndReturnArgs} args - Arguments to create many Harvests.
   * @example
   * // Create many Harvests
   * const harvest = await prisma.harvest.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Harvests and only return the `id`
   * const harvestWithIdOnly = await prisma.harvest.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends HarvestCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, HarvestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HarvestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Harvest.
   * @param {HarvestDeleteArgs} args - Arguments to delete one Harvest.
   * @example
   * // Delete one Harvest
   * const Harvest = await prisma.harvest.delete({
   *   where: {
   *     // ... filter to delete one Harvest
   *   }
   * })
   * 
   */
  delete<T extends HarvestDeleteArgs>(args: Prisma.SelectSubset<T, HarvestDeleteArgs<ExtArgs>>): Prisma.Prisma__HarvestClient<runtime.Types.Result.GetResult<Prisma.$HarvestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Harvest.
   * @param {HarvestUpdateArgs} args - Arguments to update one Harvest.
   * @example
   * // Update one Harvest
   * const harvest = await prisma.harvest.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends HarvestUpdateArgs>(args: Prisma.SelectSubset<T, HarvestUpdateArgs<ExtArgs>>): Prisma.Prisma__HarvestClient<runtime.Types.Result.GetResult<Prisma.$HarvestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Harvests.
   * @param {HarvestDeleteManyArgs} args - Arguments to filter Harvests to delete.
   * @example
   * // Delete a few Harvests
   * const { count } = await prisma.harvest.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends HarvestDeleteManyArgs>(args?: Prisma.SelectSubset<T, HarvestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Harvests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HarvestUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Harvests
   * const harvest = await prisma.harvest.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends HarvestUpdateManyArgs>(args: Prisma.SelectSubset<T, HarvestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Harvests and returns the data updated in the database.
   * @param {HarvestUpdateManyAndReturnArgs} args - Arguments to update many Harvests.
   * @example
   * // Update many Harvests
   * const harvest = await prisma.harvest.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Harvests and only return the `id`
   * const harvestWithIdOnly = await prisma.harvest.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends HarvestUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, HarvestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$HarvestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Harvest.
   * @param {HarvestUpsertArgs} args - Arguments to update or create a Harvest.
   * @example
   * // Update or create a Harvest
   * const harvest = await prisma.harvest.upsert({
   *   create: {
   *     // ... data to create a Harvest
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Harvest we want to update
   *   }
   * })
   */
  upsert<T extends HarvestUpsertArgs>(args: Prisma.SelectSubset<T, HarvestUpsertArgs<ExtArgs>>): Prisma.Prisma__HarvestClient<runtime.Types.Result.GetResult<Prisma.$HarvestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Harvests.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HarvestCountArgs} args - Arguments to filter Harvests to count.
   * @example
   * // Count the number of Harvests
   * const count = await prisma.harvest.count({
   *   where: {
   *     // ... the filter for the Harvests we want to count
   *   }
   * })
  **/
  count<T extends HarvestCountArgs>(
    args?: Prisma.Subset<T, HarvestCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], HarvestCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Harvest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HarvestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends HarvestAggregateArgs>(args: Prisma.Subset<T, HarvestAggregateArgs>): Prisma.PrismaPromise<GetHarvestAggregateType<T>>

  /**
   * Group by Harvest.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {HarvestGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends HarvestGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: HarvestGroupByArgs['orderBy'] }
      : { orderBy?: HarvestGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, HarvestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHarvestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Harvest model
 */
readonly fields: HarvestFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Harvest.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__HarvestClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  farm<T extends Prisma.FarmDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FarmDefaultArgs<ExtArgs>>): Prisma.Prisma__FarmClient<runtime.Types.Result.GetResult<Prisma.$FarmPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  crops<T extends Prisma.Harvest$cropsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Harvest$cropsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CropPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Harvest model
 */
export interface HarvestFieldRefs {
  readonly id: Prisma.FieldRef<"Harvest", 'String'>
  readonly year: Prisma.FieldRef<"Harvest", 'String'>
  readonly farmId: Prisma.FieldRef<"Harvest", 'String'>
  readonly createdAt: Prisma.FieldRef<"Harvest", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Harvest", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Harvest findUnique
 */
export type HarvestFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestInclude<ExtArgs> | null
  /**
   * Filter, which Harvest to fetch.
   */
  where: Prisma.HarvestWhereUniqueInput
}

/**
 * Harvest findUniqueOrThrow
 */
export type HarvestFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestInclude<ExtArgs> | null
  /**
   * Filter, which Harvest to fetch.
   */
  where: Prisma.HarvestWhereUniqueInput
}

/**
 * Harvest findFirst
 */
export type HarvestFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestInclude<ExtArgs> | null
  /**
   * Filter, which Harvest to fetch.
   */
  where?: Prisma.HarvestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Harvests to fetch.
   */
  orderBy?: Prisma.HarvestOrderByWithRelationInput | Prisma.HarvestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Harvests.
   */
  cursor?: Prisma.HarvestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Harvests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Harvests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Harvests.
   */
  distinct?: Prisma.HarvestScalarFieldEnum | Prisma.HarvestScalarFieldEnum[]
}

/**
 * Harvest findFirstOrThrow
 */
export type HarvestFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestInclude<ExtArgs> | null
  /**
   * Filter, which Harvest to fetch.
   */
  where?: Prisma.HarvestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Harvests to fetch.
   */
  orderBy?: Prisma.HarvestOrderByWithRelationInput | Prisma.HarvestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Harvests.
   */
  cursor?: Prisma.HarvestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Harvests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Harvests.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Harvests.
   */
  distinct?: Prisma.HarvestScalarFieldEnum | Prisma.HarvestScalarFieldEnum[]
}

/**
 * Harvest findMany
 */
export type HarvestFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestInclude<ExtArgs> | null
  /**
   * Filter, which Harvests to fetch.
   */
  where?: Prisma.HarvestWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Harvests to fetch.
   */
  orderBy?: Prisma.HarvestOrderByWithRelationInput | Prisma.HarvestOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Harvests.
   */
  cursor?: Prisma.HarvestWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Harvests from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Harvests.
   */
  skip?: number
  distinct?: Prisma.HarvestScalarFieldEnum | Prisma.HarvestScalarFieldEnum[]
}

/**
 * Harvest create
 */
export type HarvestCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestInclude<ExtArgs> | null
  /**
   * The data needed to create a Harvest.
   */
  data: Prisma.XOR<Prisma.HarvestCreateInput, Prisma.HarvestUncheckedCreateInput>
}

/**
 * Harvest createMany
 */
export type HarvestCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Harvests.
   */
  data: Prisma.HarvestCreateManyInput | Prisma.HarvestCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Harvest createManyAndReturn
 */
export type HarvestCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * The data used to create many Harvests.
   */
  data: Prisma.HarvestCreateManyInput | Prisma.HarvestCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Harvest update
 */
export type HarvestUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestInclude<ExtArgs> | null
  /**
   * The data needed to update a Harvest.
   */
  data: Prisma.XOR<Prisma.HarvestUpdateInput, Prisma.HarvestUncheckedUpdateInput>
  /**
   * Choose, which Harvest to update.
   */
  where: Prisma.HarvestWhereUniqueInput
}

/**
 * Harvest updateMany
 */
export type HarvestUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Harvests.
   */
  data: Prisma.XOR<Prisma.HarvestUpdateManyMutationInput, Prisma.HarvestUncheckedUpdateManyInput>
  /**
   * Filter which Harvests to update
   */
  where?: Prisma.HarvestWhereInput
  /**
   * Limit how many Harvests to update.
   */
  limit?: number
}

/**
 * Harvest updateManyAndReturn
 */
export type HarvestUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * The data used to update Harvests.
   */
  data: Prisma.XOR<Prisma.HarvestUpdateManyMutationInput, Prisma.HarvestUncheckedUpdateManyInput>
  /**
   * Filter which Harvests to update
   */
  where?: Prisma.HarvestWhereInput
  /**
   * Limit how many Harvests to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Harvest upsert
 */
export type HarvestUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestInclude<ExtArgs> | null
  /**
   * The filter to search for the Harvest to update in case it exists.
   */
  where: Prisma.HarvestWhereUniqueInput
  /**
   * In case the Harvest found by the `where` argument doesn't exist, create a new Harvest with this data.
   */
  create: Prisma.XOR<Prisma.HarvestCreateInput, Prisma.HarvestUncheckedCreateInput>
  /**
   * In case the Harvest was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.HarvestUpdateInput, Prisma.HarvestUncheckedUpdateInput>
}

/**
 * Harvest delete
 */
export type HarvestDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestInclude<ExtArgs> | null
  /**
   * Filter which Harvest to delete.
   */
  where: Prisma.HarvestWhereUniqueInput
}

/**
 * Harvest deleteMany
 */
export type HarvestDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Harvests to delete
   */
  where?: Prisma.HarvestWhereInput
  /**
   * Limit how many Harvests to delete.
   */
  limit?: number
}

/**
 * Harvest.crops
 */
export type Harvest$cropsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Crop
   */
  select?: Prisma.CropSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Crop
   */
  omit?: Prisma.CropOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CropInclude<ExtArgs> | null
  where?: Prisma.CropWhereInput
  orderBy?: Prisma.CropOrderByWithRelationInput | Prisma.CropOrderByWithRelationInput[]
  cursor?: Prisma.CropWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CropScalarFieldEnum | Prisma.CropScalarFieldEnum[]
}

/**
 * Harvest without action
 */
export type HarvestDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Harvest
   */
  select?: Prisma.HarvestSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Harvest
   */
  omit?: Prisma.HarvestOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.HarvestInclude<ExtArgs> | null
}
