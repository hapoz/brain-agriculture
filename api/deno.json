{
  "name": "@brain-ag/api",
  "version": "0.1.0",
  "tasks": {
    "dev": "deno run -A --watch mod.ts",
    "start": "deno run -A mod.ts",
    "test": "deno test -A",
    "test:watch": "deno test -A --watch",
    "test:coverage": "deno test -A --coverage=coverage",
    "lint": "deno lint",
    "lint:fix": "deno lint --fix",
    "fmt": "deno fmt",
    "fmt:check": "deno fmt --check",
    "check": "deno check mod.ts",
    "db:generate": "cd ../data && deno task db:generate",
    "db:push": "cd ../data && deno task db:push",
    "db:migrate": "cd ../data && deno task db:migrate",
    "db:seed": "cd ../data && deno task db:seed",
    "db:studio": "cd ../data && deno run -A npm:prisma studio",
    "db:reset": "cd ../data && deno run -A npm:prisma migrate reset",
    "db:deploy": "cd ../data && deno run -A npm:prisma migrate deploy",
    "build": "deno compile -A --target x86_64-unknown-linux-gnu mod.ts",
    "build:mac": "deno compile -A --target x86_64-apple-darwin mod.ts",
    "build:win": "deno compile -A --target x86_64-pc-windows-msvc mod.ts",
    "docker:build": "docker build -t brain-agriculture-api .",
    "docker:run": "docker run -p 3000:3000 brain-agriculture-api",
    "clean": "deno run -A -e \"import { emptyDir } from 'https://deno.land/std/fs/mod.ts'; await emptyDir('./coverage'); console.log('Cleaned coverage directory');\"",
    "typecheck": "deno check **/*.ts",
    "validate": "deno task fmt:check && deno task lint && deno task typecheck && deno task test"
  },
  "exports": "./mod.ts",
  "imports": {
    "@/": "./",
    "@nestjs/common": "npm:@nestjs/common@^10.4.19",
    "@nestjs/config": "npm:@nestjs/config@^4.0.2",
    "@nestjs/core": "npm:@nestjs/core@^10.4.19",
    "@nestjs/platform-express": "npm:@nestjs/platform-express@^10.4.19",
    "class-transformer": "npm:class-transformer@^0.5.1",
    "class-validator": "npm:class-validator@^0.14.2",
    "@prisma/client": "../data/generated/prisma/index.ts"
  },
  "compilerOptions": {
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true
  }
}
